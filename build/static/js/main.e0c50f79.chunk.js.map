{"version":3,"sources":["AppPermission.tsx","serviceWorker.ts","index.tsx"],"names":["AppPermission","props","getTeamsContext","microsoftTeams","context","setState","teamsContext","getDevicePermission","getLocation","showLocation","devicePosition","latitude","coords","longitude","lat","lng","positionString","alert","errorHandler","err","code","navigator","geolocation","getCurrentPosition","timeout","onMapCreated","map","setOptions","disableDefaultUI","onDragEnd","e","console","log","onCloseClick","onClick","state","initializeIcons","this","upn","Icon","iconName","className","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kSAoGeA,E,kDA9Fb,WAAYC,GAAa,IAAD,8BACtB,cAAMA,IAeRC,gBAAkB,WAChBC,cAA0B,SAACC,GACzB,EAAKC,SAAS,CACZC,aAAcF,QAnBI,EAwBxBG,oBAAsB,WACpB,EAAKC,eAzBiB,EA4BxBC,aAAe,SAACC,GACd,IAAIC,EAAWD,EAAeE,OAAOD,SACjCE,EAAYH,EAAeE,OAAOC,UACtC,EAAKR,SAAS,CACZO,OAAQ,CACNE,IAAKH,EACLI,IAAKF,GAEPG,eAAgB,cAAgBL,EAAW,eAAiBE,IAE9DI,MAAM,cAAgBN,EAAW,eAAiBE,IAtC5B,EAyCxBK,aAAe,SAACC,GACG,IAAbA,EAAIC,KACNH,MAAM,4BACgB,IAAbE,EAAIC,MACbH,MAAM,oCA7Cc,EAiDxBT,YAAc,WACZ,GAAIa,UAAUC,YAAa,CAGzBD,UAAUC,YAAYC,mBACpB,EAAKd,aACL,EAAKS,aAHO,CAAEM,QAAS,WAOzBP,MAAM,iDA3Dc,EA+DxBQ,aAAe,SAACC,GACdA,EAAIC,WAAW,CACbC,kBAAkB,KAjEE,EAqExBC,UAAY,SAACC,GACXC,QAAQC,IAAI,YAAaF,IAtEH,EAyExBG,aAAe,WACbF,QAAQC,IAAI,iBA1EU,EA6ExBE,QAAU,SAACJ,GACTC,QAAQC,IAAI,UAAWF,IA5EvB,EAAKK,MAAQ,CACX7B,aAAc,KACdU,eAAgB,KAChBJ,OAAQ,CACNE,IAAK,EACLC,IAAK,IAGTZ,eACAiC,cACA,EAAKlC,kBACL,EAAKK,sBAbiB,E,qDAiFd,IAAD,MACP,OACE,6BACE,mCACA,gDAAY8B,KAAKF,aAAjB,iBAAY,EAAY7B,oBAAxB,aAAY,EAA0BgC,KACtC,2CACc,kBAACC,EAAA,EAAD,CAAMC,SAAS,YAAYC,UAAU,mBAAoB,IADvE,UAEGJ,KAAKF,aAFR,aAEG,EAAYnB,qB,GAzFK0B,IAAMC,WCOdC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAEL,kBAAC,EAAD,MAGFC,SAASC,eAAe,SD+HpB,kBAAmB/B,WACrBA,UAAUgC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,c","file":"static/js/main.e0c50f79.chunk.js","sourcesContent":["import React from \"react\";\r\nimport * as microsoftTeams from \"@microsoft/teams-js\";\r\nimport { initializeIcons } from \"@uifabric/icons\";\r\nimport { Icon } from \"@fluentui/react/lib/Icon\";\r\n\r\nclass AppPermission extends React.Component<any, any> {\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      teamsContext: null,\r\n      positionString: null,\r\n      coords: {\r\n        lat: 0,\r\n        lng: 0,\r\n      },\r\n    };\r\n    microsoftTeams.initialize();\r\n    initializeIcons();\r\n    this.getTeamsContext();\r\n    this.getDevicePermission();\r\n  }\r\n\r\n  getTeamsContext = () => {\r\n    microsoftTeams.getContext((context) => {\r\n      this.setState({\r\n        teamsContext: context,\r\n      });\r\n    });\r\n  };\r\n\r\n  getDevicePermission = () => {\r\n    this.getLocation();\r\n  };\r\n\r\n  showLocation = (devicePosition: any) => {\r\n    var latitude = devicePosition.coords.latitude;\r\n    var longitude = devicePosition.coords.longitude;\r\n    this.setState({\r\n      coords: {\r\n        lat: latitude,\r\n        lng: longitude,\r\n      },\r\n      positionString: \"Latitude : \" + latitude + \" Longitude: \" + longitude,\r\n    });\r\n    alert(\"Latitude : \" + latitude + \" Longitude: \" + longitude);\r\n  };\r\n\r\n  errorHandler = (err: any) => {\r\n    if (err.code === 1) {\r\n      alert(\"Error: Access is denied!\");\r\n    } else if (err.code === 2) {\r\n      alert(\"Error: Position is unavailable!\");\r\n    }\r\n  };\r\n\r\n  getLocation = () => {\r\n    if (navigator.geolocation) {\r\n      // timeout at 60000 milliseconds (60 seconds)\r\n      var options = { timeout: 3000000 };\r\n      navigator.geolocation.getCurrentPosition(\r\n        this.showLocation,\r\n        this.errorHandler,\r\n        options\r\n      );\r\n    } else {\r\n      alert(\"Sorry, browser does not support geolocation!\");\r\n    }\r\n  };\r\n\r\n  onMapCreated = (map: any) => {\r\n    map.setOptions({\r\n      disableDefaultUI: true,\r\n    });\r\n  };\r\n\r\n  onDragEnd = (e: any) => {\r\n    console.log(\"onDragEnd\", e);\r\n  };\r\n\r\n  onCloseClick = () => {\r\n    console.log(\"onCloseClick\");\r\n  };\r\n\r\n  onClick = (e: any) => {\r\n    console.log(\"onClick\", e);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2>Hi,</h2>\r\n        <h3>UPN == {this.state?.teamsContext?.upn}</h3>\r\n        <h3>\r\n          Location == <Icon iconName=\"CompassNW\" className=\"ms-IconExample\" />{\" \"}\r\n          {this.state?.positionString}\r\n        </h3>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default AppPermission;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport AppPermission from './AppPermission';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <AppPermission />\n  // </React.StrictMode>,\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}